/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.hadoop.hbase.server.error;

import java.util.ArrayList;
import java.util.List;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hbase.BaseConfigurable;

/**
 * Simple ErrorMonitor factory that builds an error monitor that can be used to keep track of errors
 * across several different processes.
 * <p>
 * A <b>single</b> {@link ErrorMonitor} should be used across all interested objects in the process.
 */
public class ErrorMonitorFactory<T, E extends Exception> extends BaseConfigurable {

  /**
   * Converter passed in constructor that can be used to convert error information to typed error
   * method calls for interested parties
   */
  protected final ErrorConverter<T, E> converter;

  private static final List<FaultInjector> faults = new ArrayList<FaultInjector>();
  
  /**
   * Add a fault injector that will run on checks of the {@link ErrorMonitor} generated by this factory. To ensure that faults are injected, this must be called before the the monitor is created via {@link #createErrorMonitor()}.
   * <p>
   * Exposed for TESTING.
   * @param injector
   */
  public static void addFaultInjector(FaultInjector injector){
    faults.add(injector);
  }
  
  /**
   * Complement to {@link #addFaultInjector(FaultInjector)} - removes any existing fault injectors
   * set for the factory.
   * <p>
   * Exposed for TESTING.
   */
  public static void clearFaults(){
    faults.clear();
  }
  
  public ErrorMonitorFactory(ErrorConverter<T, E> converter, Configuration conf) {
    this.converter= converter;
  }

  
  public ErrorMonitorFactory(ErrorListenerBridge<T> transformer,  ErrorFailureThrower<E> thrower,
    ReceiveErrorChecker checker, Configuration conf){
    this(new DelegatingErrorConverter<T, E>(transformer, thrower, checker), conf);
  }

  public final  ErrorMonitor<E> createErrorMonitor(){
    ErrorMonitor<E> monitor = buildErrorMonitor();
    // wrap with a fault injector, if we need to
    if (faults.size() > 0) {
      monitor = new InjectingErrorMonitor<E>(monitor, faults);
    }
    return monitor;
  }

  /**
   * Build the actual error monitor that should be used for a given process or operation.
   * <p>
   * By default, just creates a simple error monitor using the passed in conversion objects.
   * Subclasses should override this method to get custom monitor behavior.
   * @return an error monitor that is optionally wrapped by a fault injector for errors.
   */
  protected ErrorMonitor<E> buildErrorMonitor() {
    return new BaseBoundErrorMonitor<T, E>(converter, converter, converter);
  }
}
